{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"smart_contracts/solc-js/downloadCurrentVersion.js","filenameRelative":"smart_contracts/solc-js/downloadCurrentVersion.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"smart_contracts/solc-js/downloadCurrentVersion.js.map","sourceFileName":"smart_contracts/solc-js/downloadCurrentVersion.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"downloadCurrentVersion"},"ignored":false,"code":"///usr/bin/env node\n// This is used to download the correct binary version\n// as part of the prepublish step.\nvar pkg = require('./package.json');\n\nvar fs = require('fs');\n\nvar https = require('https');\n\nvar MemoryStream = require('memorystream');\n\nfunction getVersionList(cb) {\n  console.log('Retrieving available version list...');\n  var mem = new MemoryStream(null, {\n    readable: false\n  });\n  https.get('https://ethereum.github.io/solc-bin/bin/list.json', function (response) {\n    if (response.statusCode !== 200) {\n      console.log('Error downloading file: ' + response.statusCode);\n      process.exit(1);\n    }\n\n    response.pipe(mem);\n    response.on('end', function () {\n      cb(mem.toString());\n    });\n  });\n}\n\nfunction downloadBinary(version) {\n  console.log('Downloading version', version);\n  var file = fs.createWriteStream('soljson.js');\n  https.get('https://ethereum.github.io/solc-bin/bin/' + version, function (response) {\n    if (response.statusCode !== 200) {\n      console.log('Error downloading file: ' + response.statusCode);\n      process.exit(1);\n    }\n\n    response.pipe(file);\n    file.on('finish', function () {\n      file.close(function () {\n        console.log('Done.');\n      });\n    });\n  });\n}\n\nconsole.log('Downloading correct solidity binary...');\ngetVersionList(function (list) {\n  list = JSON.parse(list);\n  var wanted = pkg.version.match(/^(\\d+\\.\\d+\\.\\d+)$/)[1];\n  downloadBinary(list.releases[wanted]);\n});","map":{"version":3,"sources":["smart_contracts/solc-js/downloadCurrentVersion.js"],"names":["pkg","require","fs","https","MemoryStream","getVersionList","cb","console","log","mem","readable","get","response","statusCode","process","exit","pipe","on","toString","downloadBinary","version","file","createWriteStream","close","list","JSON","parse","wanted","match","releases"],"mappings":"AAAA;AAEA;AACA;AAEA,IAAIA,MAAMC,QAAQ,gBAAR,CAAV;;AACA,IAAIC,KAAKD,QAAQ,IAAR,CAAT;;AACA,IAAIE,QAAQF,QAAQ,OAAR,CAAZ;;AACA,IAAIG,eAAeH,QAAQ,cAAR,CAAnB;;AAEA,SAASI,cAAT,CAAyBC,EAAzB,EAA6B;AAC3BC,UAAQC,GAAR,CAAY,sCAAZ;AAEA,MAAIC,MAAM,IAAIL,YAAJ,CAAiB,IAAjB,EAAuB;AAAEM,cAAU;AAAZ,GAAvB,CAAV;AACAP,QAAMQ,GAAN,CAAU,mDAAV,EAA+D,UAAUC,QAAV,EAAoB;AACjF,QAAIA,SAASC,UAAT,KAAwB,GAA5B,EAAiC;AAC/BN,cAAQC,GAAR,CAAY,6BAA6BI,SAASC,UAAlD;AACAC,cAAQC,IAAR,CAAa,CAAb;AACD;;AACDH,aAASI,IAAT,CAAcP,GAAd;AACAG,aAASK,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC7BX,SAAGG,IAAIS,QAAJ,EAAH;AACD,KAFD;AAGD,GATD;AAUD;;AAED,SAASC,cAAT,CAAyBC,OAAzB,EAAkC;AAChCb,UAAQC,GAAR,CAAY,qBAAZ,EAAmCY,OAAnC;AAEA,MAAIC,OAAOnB,GAAGoB,iBAAH,CAAqB,YAArB,CAAX;AACAnB,QAAMQ,GAAN,CAAU,6CAA6CS,OAAvD,EAAgE,UAAUR,QAAV,EAAoB;AAClF,QAAIA,SAASC,UAAT,KAAwB,GAA5B,EAAiC;AAC/BN,cAAQC,GAAR,CAAY,6BAA6BI,SAASC,UAAlD;AACAC,cAAQC,IAAR,CAAa,CAAb;AACD;;AACDH,aAASI,IAAT,CAAcK,IAAd;AACAA,SAAKJ,EAAL,CAAQ,QAAR,EAAkB,YAAY;AAC5BI,WAAKE,KAAL,CAAW,YAAY;AACrBhB,gBAAQC,GAAR,CAAY,OAAZ;AACD,OAFD;AAGD,KAJD;AAKD,GAXD;AAYD;;AAEDD,QAAQC,GAAR,CAAY,wCAAZ;AAEAH,eAAe,UAAUmB,IAAV,EAAgB;AAC7BA,SAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACA,MAAIG,SAAS3B,IAAIoB,OAAJ,CAAYQ,KAAZ,CAAkB,mBAAlB,EAAuC,CAAvC,CAAb;AACAT,iBAAeK,KAAKK,QAAL,CAAcF,MAAd,CAAf;AACD,CAJD","file":"smart_contracts/solc-js/downloadCurrentVersion.js.map","sourcesContent":["#!/usr/bin/env node\n\n// This is used to download the correct binary version\n// as part of the prepublish step.\n\nvar pkg = require('./package.json');\nvar fs = require('fs');\nvar https = require('https');\nvar MemoryStream = require('memorystream');\n\nfunction getVersionList (cb) {\n  console.log('Retrieving available version list...');\n\n  var mem = new MemoryStream(null, { readable: false });\n  https.get('https://ethereum.github.io/solc-bin/bin/list.json', function (response) {\n    if (response.statusCode !== 200) {\n      console.log('Error downloading file: ' + response.statusCode);\n      process.exit(1);\n    }\n    response.pipe(mem);\n    response.on('end', function () {\n      cb(mem.toString());\n    });\n  });\n}\n\nfunction downloadBinary (version) {\n  console.log('Downloading version', version);\n\n  var file = fs.createWriteStream('soljson.js');\n  https.get('https://ethereum.github.io/solc-bin/bin/' + version, function (response) {\n    if (response.statusCode !== 200) {\n      console.log('Error downloading file: ' + response.statusCode);\n      process.exit(1);\n    }\n    response.pipe(file);\n    file.on('finish', function () {\n      file.close(function () {\n        console.log('Done.');\n      });\n    });\n  });\n}\n\nconsole.log('Downloading correct solidity binary...');\n\ngetVersionList(function (list) {\n  list = JSON.parse(list);\n  var wanted = pkg.version.match(/^(\\d+\\.\\d+\\.\\d+)$/)[1];\n  downloadBinary(list.releases[wanted]);\n});\n"]},"hash":"6c4aada9ec6f48f7f99c45483ea9075c7f51cd3d"}
